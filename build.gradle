plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id 'maven-publish'
}

version = project.mod_version + project.mc_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

runClient.doFirst {
	args = ['--username', "Perspective${new Random().nextInt(1000)}"]
}

loom {
	accessWidenerPath = file("src/main/resources/perspective.accesswidener")
}

repositories {
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft}"
	mappings "net.fabricmc:yarn:${project.mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api}"

	include(implementation"com.github.LlamaLad7:MixinExtras:0.1.1")
	annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")

	include(modImplementation "com.github.MCLegoMan:fabric-simplelibs:${project.fabricsimplelibs}")
	include(modImplementation "com.github.MCLegoMan:releasetypeutils:${project.releasetypeutils}")

	modImplementation "com.terraformersmc:modmenu:${project.modmenu}"
	modImplementation "com.github.Nettakrim:Souper-Secret-Settings:${project.souper_secret_settings}"
}

processResources {
	inputs.property "version", project.mod_version

	filesMatching("fabric.mod.json") {
		expand "version": project.mod_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}

githubRelease {
	token rootProject.file(".env").text.readLines().get(1).replace("GITHUB=", "").replace("\"", "")
	owner "MCLegoMan"
	repo "Perspective"
	tagName "${project.github_tag}"
	targetCommitish "development-1.20.3-4"
	releaseName "${project.title}"
	generateReleaseNotes false
	body rootProject.file("CHANGELOG.md").text
	draft false
	if (project.version_type == "release") {
		prerelease false
	}
	else {
		prerelease true
	}
	releaseAssets tasks.remapJar
	allowUploadToExisting.set false
	overwrite false
	dryRun false
	apiEndpoint "https://api.github.com"
	client
}